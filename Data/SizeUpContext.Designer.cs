//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("Data", "FK_Band_Attribute", "Attribute", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Data.Attribute), "Band", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Data.Band), true)]
[assembly: EdmRelationshipAttribute("Data", "FK_Business_Industry", "Industry", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Data.Industry), "Business", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Data.Business), true)]
[assembly: EdmRelationshipAttribute("Data", "FK_BusinessData_Business", "Business", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Data.Business), "BusinessData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Data.BusinessData), true)]
[assembly: EdmRelationshipAttribute("Data", "FK_BusinessData_GeographicLocation", "GeographicLocation", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Data.GeographicLocation), "BusinessData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Data.BusinessData), true)]
[assembly: EdmRelationshipAttribute("Data", "FK_BusinessData_Industry", "Industry", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Data.Industry), "BusinessData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Data.BusinessData), true)]
[assembly: EdmRelationshipAttribute("Data", "FK_City_GeographicLocation", "GeographicLocation", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Data.GeographicLocation), "City", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Data.City), true)]
[assembly: EdmRelationshipAttribute("Data", "FK_City_State", "State", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Data.State), "City", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Data.City), true)]
[assembly: EdmRelationshipAttribute("Data", "FK_GeographicLocation_Granularity", "Granularity", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Data.Granularity), "GeographicLocation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Data.GeographicLocation), true)]
[assembly: EdmRelationshipAttribute("Data", "FK_IndustryData_GeographicLocation", "GeographicLocation", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Data.GeographicLocation), "IndustryData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Data.IndustryData), true)]
[assembly: EdmRelationshipAttribute("Data", "FK_State_GeographicLocation", "GeographicLocation", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Data.GeographicLocation), "State", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Data.State), true)]
[assembly: EdmRelationshipAttribute("Data", "FK_IndustryData_Industry", "Industry", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Data.Industry), "IndustryData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Data.IndustryData), true)]
[assembly: EdmRelationshipAttribute("Data", "FK_IndustryKeyword_Industry", "Industry", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Data.Industry), "IndustryKeyword", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Data.IndustryKeyword), true)]
[assembly: EdmRelationshipAttribute("Data", "GeographicLocationGeographicLocation", "IntersectedGeographicLocations", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Data.GeographicLocation), "GeographicLocations", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Data.GeographicLocation))]
[assembly: EdmRelationshipAttribute("Data", "IndustryDataBand", "Band", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Data.Band), "IndustryData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Data.IndustryData))]
[assembly: EdmRelationshipAttribute("Data", "FK_Geography_GeographicLocation", "GeographicLocation", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Data.GeographicLocation), "Geography", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Data.Geography), true)]
[assembly: EdmRelationshipAttribute("Data", "FK_City_County", "County", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Data.County), "City", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Data.City), true)]
[assembly: EdmRelationshipAttribute("Data", "FK_Business_State", "State", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Data.State), "Business", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Data.Business), true)]
[assembly: EdmRelationshipAttribute("Data", "FK_County_GeographicLocation", "GeographicLocation", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Data.GeographicLocation), "County", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Data.County), true)]
[assembly: EdmRelationshipAttribute("Data", "FK_County_State", "State", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Data.State), "County", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Data.County), true)]
[assembly: EdmRelationshipAttribute("Data", "FK_Place_City", "City", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Data.City), "Place", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Data.Place), true)]
[assembly: EdmRelationshipAttribute("Data", "FK_Place_County", "County", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Data.County), "Place", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Data.Place), true)]
[assembly: EdmRelationshipAttribute("Data", "FK_Place_GeographicLocation", "GeographicLocation", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Data.GeographicLocation), "Place", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Data.Place), true)]
[assembly: EdmRelationshipAttribute("Data", "BusinessCity", "Business", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Data.Business), "City", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Data.City))]

#endregion

namespace Data
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class SizeUpContext : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new SizeUpContext object using the connection string found in the 'SizeUpContext' section of the application configuration file.
        /// </summary>
        public SizeUpContext() : base("name=SizeUpContext", "SizeUpContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new SizeUpContext object.
        /// </summary>
        public SizeUpContext(string connectionString) : base(connectionString, "SizeUpContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new SizeUpContext object.
        /// </summary>
        public SizeUpContext(EntityConnection connection) : base(connection, "SizeUpContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Attribute> Attributes
        {
            get
            {
                if ((_Attributes == null))
                {
                    _Attributes = base.CreateObjectSet<Attribute>("Attributes");
                }
                return _Attributes;
            }
        }
        private ObjectSet<Attribute> _Attributes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Band> Bands
        {
            get
            {
                if ((_Bands == null))
                {
                    _Bands = base.CreateObjectSet<Band>("Bands");
                }
                return _Bands;
            }
        }
        private ObjectSet<Band> _Bands;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Branch> Branches
        {
            get
            {
                if ((_Branches == null))
                {
                    _Branches = base.CreateObjectSet<Branch>("Branches");
                }
                return _Branches;
            }
        }
        private ObjectSet<Branch> _Branches;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Business> Businesses
        {
            get
            {
                if ((_Businesses == null))
                {
                    _Businesses = base.CreateObjectSet<Business>("Businesses");
                }
                return _Businesses;
            }
        }
        private ObjectSet<Business> _Businesses;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<BusinessData> BusinessDatas
        {
            get
            {
                if ((_BusinessDatas == null))
                {
                    _BusinessDatas = base.CreateObjectSet<BusinessData>("BusinessDatas");
                }
                return _BusinessDatas;
            }
        }
        private ObjectSet<BusinessData> _BusinessDatas;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<City> Cities
        {
            get
            {
                if ((_Cities == null))
                {
                    _Cities = base.CreateObjectSet<City>("Cities");
                }
                return _Cities;
            }
        }
        private ObjectSet<City> _Cities;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<County> Counties
        {
            get
            {
                if ((_Counties == null))
                {
                    _Counties = base.CreateObjectSet<County>("Counties");
                }
                return _Counties;
            }
        }
        private ObjectSet<County> _Counties;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<GeographicLocation> GeographicLocations
        {
            get
            {
                if ((_GeographicLocations == null))
                {
                    _GeographicLocations = base.CreateObjectSet<GeographicLocation>("GeographicLocations");
                }
                return _GeographicLocations;
            }
        }
        private ObjectSet<GeographicLocation> _GeographicLocations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Geography> Geographies
        {
            get
            {
                if ((_Geographies == null))
                {
                    _Geographies = base.CreateObjectSet<Geography>("Geographies");
                }
                return _Geographies;
            }
        }
        private ObjectSet<Geography> _Geographies;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Granularity> Granularities
        {
            get
            {
                if ((_Granularities == null))
                {
                    _Granularities = base.CreateObjectSet<Granularity>("Granularities");
                }
                return _Granularities;
            }
        }
        private ObjectSet<Granularity> _Granularities;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Industry> Industries
        {
            get
            {
                if ((_Industries == null))
                {
                    _Industries = base.CreateObjectSet<Industry>("Industries");
                }
                return _Industries;
            }
        }
        private ObjectSet<Industry> _Industries;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<IndustryData> IndustryDatas
        {
            get
            {
                if ((_IndustryDatas == null))
                {
                    _IndustryDatas = base.CreateObjectSet<IndustryData>("IndustryDatas");
                }
                return _IndustryDatas;
            }
        }
        private ObjectSet<IndustryData> _IndustryDatas;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<IndustryKeyword> IndustryKeywords
        {
            get
            {
                if ((_IndustryKeywords == null))
                {
                    _IndustryKeywords = base.CreateObjectSet<IndustryKeyword>("IndustryKeywords");
                }
                return _IndustryKeywords;
            }
        }
        private ObjectSet<IndustryKeyword> _IndustryKeywords;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Nation> Nations
        {
            get
            {
                if ((_Nations == null))
                {
                    _Nations = base.CreateObjectSet<Nation>("Nations");
                }
                return _Nations;
            }
        }
        private ObjectSet<Nation> _Nations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SitemapBusiness> SitemapBusinesses
        {
            get
            {
                if ((_SitemapBusinesses == null))
                {
                    _SitemapBusinesses = base.CreateObjectSet<SitemapBusiness>("SitemapBusinesses");
                }
                return _SitemapBusinesses;
            }
        }
        private ObjectSet<SitemapBusiness> _SitemapBusinesses;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<State> States
        {
            get
            {
                if ((_States == null))
                {
                    _States = base.CreateObjectSet<State>("States");
                }
                return _States;
            }
        }
        private ObjectSet<State> _States;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ZipCode> ZipCodes
        {
            get
            {
                if ((_ZipCodes == null))
                {
                    _ZipCodes = base.CreateObjectSet<ZipCode>("ZipCodes");
                }
                return _ZipCodes;
            }
        }
        private ObjectSet<ZipCode> _ZipCodes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Place> Places
        {
            get
            {
                if ((_Places == null))
                {
                    _Places = base.CreateObjectSet<Place>("Places");
                }
                return _Places;
            }
        }
        private ObjectSet<Place> _Places;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Attributes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAttributes(Attribute attribute)
        {
            base.AddObject("Attributes", attribute);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Bands EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBands(Band band)
        {
            base.AddObject("Bands", band);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Branches EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBranches(Branch branch)
        {
            base.AddObject("Branches", branch);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Businesses EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBusinesses(Business business)
        {
            base.AddObject("Businesses", business);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the BusinessDatas EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBusinessDatas(BusinessData businessData)
        {
            base.AddObject("BusinessDatas", businessData);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Cities EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCities(City city)
        {
            base.AddObject("Cities", city);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Counties EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCounties(County county)
        {
            base.AddObject("Counties", county);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the GeographicLocations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGeographicLocations(GeographicLocation geographicLocation)
        {
            base.AddObject("GeographicLocations", geographicLocation);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Geographies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGeographies(Geography geography)
        {
            base.AddObject("Geographies", geography);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Granularities EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGranularities(Granularity granularity)
        {
            base.AddObject("Granularities", granularity);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Industries EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToIndustries(Industry industry)
        {
            base.AddObject("Industries", industry);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the IndustryDatas EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToIndustryDatas(IndustryData industryData)
        {
            base.AddObject("IndustryDatas", industryData);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the IndustryKeywords EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToIndustryKeywords(IndustryKeyword industryKeyword)
        {
            base.AddObject("IndustryKeywords", industryKeyword);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Nations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToNations(Nation nation)
        {
            base.AddObject("Nations", nation);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SitemapBusinesses EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSitemapBusinesses(SitemapBusiness sitemapBusiness)
        {
            base.AddObject("SitemapBusinesses", sitemapBusiness);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the States EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStates(State state)
        {
            base.AddObject("States", state);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ZipCodes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToZipCodes(ZipCode zipCode)
        {
            base.AddObject("ZipCodes", zipCode);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Places EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPlaces(Place place)
        {
            base.AddObject("Places", place);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Data", Name="Attribute")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Attribute : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Attribute object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Attribute CreateAttribute(global::System.Int64 id, global::System.String name)
        {
            Attribute attribute = new Attribute();
            attribute.Id = id;
            attribute.Name = name;
            return attribute;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_Band_Attribute", "Band")]
        public EntityCollection<Band> Bands
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Band>("Data.FK_Band_Attribute", "Band");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Band>("Data.FK_Band_Attribute", "Band", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Data", Name="Band")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Band : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Band object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="attributeId">Initial value of the AttributeId property.</param>
        public static Band CreateBand(global::System.Int64 id, global::System.Int64 attributeId)
        {
            Band band = new Band();
            band.Id = id;
            band.AttributeId = attributeId;
            return band;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 AttributeId
        {
            get
            {
                return _AttributeId;
            }
            set
            {
                OnAttributeIdChanging(value);
                ReportPropertyChanging("AttributeId");
                _AttributeId = StructuralObject.SetValidValue(value, "AttributeId");
                ReportPropertyChanged("AttributeId");
                OnAttributeIdChanged();
            }
        }
        private global::System.Int64 _AttributeId;
        partial void OnAttributeIdChanging(global::System.Int64 value);
        partial void OnAttributeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> Min
        {
            get
            {
                return _Min;
            }
            set
            {
                OnMinChanging(value);
                ReportPropertyChanging("Min");
                _Min = StructuralObject.SetValidValue(value, "Min");
                ReportPropertyChanged("Min");
                OnMinChanged();
            }
        }
        private Nullable<global::System.Decimal> _Min;
        partial void OnMinChanging(Nullable<global::System.Decimal> value);
        partial void OnMinChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> Max
        {
            get
            {
                return _Max;
            }
            set
            {
                OnMaxChanging(value);
                ReportPropertyChanging("Max");
                _Max = StructuralObject.SetValidValue(value, "Max");
                ReportPropertyChanged("Max");
                OnMaxChanged();
            }
        }
        private Nullable<global::System.Decimal> _Max;
        partial void OnMaxChanging(Nullable<global::System.Decimal> value);
        partial void OnMaxChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_Band_Attribute", "Attribute")]
        public Attribute Attribute
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Attribute>("Data.FK_Band_Attribute", "Attribute").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Attribute>("Data.FK_Band_Attribute", "Attribute").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Attribute> AttributeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Attribute>("Data.FK_Band_Attribute", "Attribute");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Attribute>("Data.FK_Band_Attribute", "Attribute", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "IndustryDataBand", "IndustryData")]
        public EntityCollection<IndustryData> IndustryDatas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<IndustryData>("Data.IndustryDataBand", "IndustryData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<IndustryData>("Data.IndustryDataBand", "IndustryData", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Data", Name="Branch")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Branch : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Branch object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        public static Branch CreateBranch(global::System.Int64 id)
        {
            Branch branch = new Branch();
            branch.Id = id;
            return branch;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                OnCodeChanging(value);
                ReportPropertyChanging("Code");
                _Code = StructuralObject.SetValidValue(value, true, "Code");
                ReportPropertyChanged("Code");
                OnCodeChanged();
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ItaDescription
        {
            get
            {
                return _ItaDescription;
            }
            set
            {
                OnItaDescriptionChanging(value);
                ReportPropertyChanging("ItaDescription");
                _ItaDescription = StructuralObject.SetValidValue(value, true, "ItaDescription");
                ReportPropertyChanged("ItaDescription");
                OnItaDescriptionChanged();
            }
        }
        private global::System.String _ItaDescription;
        partial void OnItaDescriptionChanging(global::System.String value);
        partial void OnItaDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EngDescription
        {
            get
            {
                return _EngDescription;
            }
            set
            {
                OnEngDescriptionChanging(value);
                ReportPropertyChanging("EngDescription");
                _EngDescription = StructuralObject.SetValidValue(value, true, "EngDescription");
                ReportPropertyChanged("EngDescription");
                OnEngDescriptionChanged();
            }
        }
        private global::System.String _EngDescription;
        partial void OnEngDescriptionChanging(global::System.String value);
        partial void OnEngDescriptionChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Data", Name="Business")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Business : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Business object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="isActive">Initial value of the IsActive property.</param>
        public static Business CreateBusiness(global::System.Int64 id, global::System.Boolean isActive)
        {
            Business business = new Business();
            business.Id = id;
            business.IsActive = isActive;
            return business;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Address
        {
            get
            {
                return _Address;
            }
            set
            {
                OnAddressChanging(value);
                ReportPropertyChanging("Address");
                _Address = StructuralObject.SetValidValue(value, true, "Address");
                ReportPropertyChanged("Address");
                OnAddressChanged();
            }
        }
        private global::System.String _Address;
        partial void OnAddressChanging(global::System.String value);
        partial void OnAddressChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String City
        {
            get
            {
                return _City;
            }
            set
            {
                OnCityChanging(value);
                ReportPropertyChanging("City");
                _City = StructuralObject.SetValidValue(value, true, "City");
                ReportPropertyChanged("City");
                OnCityChanged();
            }
        }
        private global::System.String _City;
        partial void OnCityChanging(global::System.String value);
        partial void OnCityChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Phone
        {
            get
            {
                return _Phone;
            }
            set
            {
                OnPhoneChanging(value);
                ReportPropertyChanging("Phone");
                _Phone = StructuralObject.SetValidValue(value, true, "Phone");
                ReportPropertyChanged("Phone");
                OnPhoneChanged();
            }
        }
        private global::System.String _Phone;
        partial void OnPhoneChanging(global::System.String value);
        partial void OnPhoneChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CervedId
        {
            get
            {
                return _CervedId;
            }
            set
            {
                OnCervedIdChanging(value);
                ReportPropertyChanging("CervedId");
                _CervedId = StructuralObject.SetValidValue(value, "CervedId");
                ReportPropertyChanged("CervedId");
                OnCervedIdChanged();
            }
        }
        private Nullable<global::System.Int64> _CervedId;
        partial void OnCervedIdChanging(Nullable<global::System.Int64> value);
        partial void OnCervedIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> YearAppeared
        {
            get
            {
                return _YearAppeared;
            }
            set
            {
                OnYearAppearedChanging(value);
                ReportPropertyChanging("YearAppeared");
                _YearAppeared = StructuralObject.SetValidValue(value, "YearAppeared");
                ReportPropertyChanged("YearAppeared");
                OnYearAppearedChanged();
            }
        }
        private Nullable<global::System.Int32> _YearAppeared;
        partial void OnYearAppearedChanging(Nullable<global::System.Int32> value);
        partial void OnYearAppearedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> Lat
        {
            get
            {
                return _Lat;
            }
            set
            {
                OnLatChanging(value);
                ReportPropertyChanging("Lat");
                _Lat = StructuralObject.SetValidValue(value, "Lat");
                ReportPropertyChanged("Lat");
                OnLatChanged();
            }
        }
        private Nullable<global::System.Decimal> _Lat;
        partial void OnLatChanging(Nullable<global::System.Decimal> value);
        partial void OnLatChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> Long
        {
            get
            {
                return _Long;
            }
            set
            {
                OnLongChanging(value);
                ReportPropertyChanging("Long");
                _Long = StructuralObject.SetValidValue(value, "Long");
                ReportPropertyChanged("Long");
                OnLongChanged();
            }
        }
        private Nullable<global::System.Decimal> _Long;
        partial void OnLongChanging(Nullable<global::System.Decimal> value);
        partial void OnLongChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> IndustryId
        {
            get
            {
                return _IndustryId;
            }
            set
            {
                OnIndustryIdChanging(value);
                ReportPropertyChanging("IndustryId");
                _IndustryId = StructuralObject.SetValidValue(value, "IndustryId");
                ReportPropertyChanged("IndustryId");
                OnIndustryIdChanged();
            }
        }
        private Nullable<global::System.Int64> _IndustryId;
        partial void OnIndustryIdChanging(Nullable<global::System.Int64> value);
        partial void OnIndustryIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ZipCode
        {
            get
            {
                return _ZipCode;
            }
            set
            {
                OnZipCodeChanging(value);
                ReportPropertyChanging("ZipCode");
                _ZipCode = StructuralObject.SetValidValue(value, true, "ZipCode");
                ReportPropertyChanged("ZipCode");
                OnZipCodeChanged();
            }
        }
        private global::System.String _ZipCode;
        partial void OnZipCodeChanging(global::System.String value);
        partial void OnZipCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> StateId
        {
            get
            {
                return _StateId;
            }
            set
            {
                OnStateIdChanging(value);
                ReportPropertyChanging("StateId");
                _StateId = StructuralObject.SetValidValue(value, "StateId");
                ReportPropertyChanged("StateId");
                OnStateIdChanged();
            }
        }
        private Nullable<global::System.Int64> _StateId;
        partial void OnStateIdChanging(Nullable<global::System.Int64> value);
        partial void OnStateIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CountyId
        {
            get
            {
                return _CountyId;
            }
            set
            {
                OnCountyIdChanging(value);
                ReportPropertyChanging("CountyId");
                _CountyId = StructuralObject.SetValidValue(value, "CountyId");
                ReportPropertyChanged("CountyId");
                OnCountyIdChanged();
            }
        }
        private Nullable<global::System.Int64> _CountyId;
        partial void OnCountyIdChanging(Nullable<global::System.Int64> value);
        partial void OnCountyIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SEOKey
        {
            get
            {
                return _SEOKey;
            }
            set
            {
                OnSEOKeyChanging(value);
                ReportPropertyChanging("SEOKey");
                _SEOKey = StructuralObject.SetValidValue(value, true, "SEOKey");
                ReportPropertyChanged("SEOKey");
                OnSEOKeyChanged();
            }
        }
        private global::System.String _SEOKey;
        partial void OnSEOKeyChanging(global::System.String value);
        partial void OnSEOKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value, "IsActive");
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_Business_Industry", "Industry")]
        public Industry Industry
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("Data.FK_Business_Industry", "Industry").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("Data.FK_Business_Industry", "Industry").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Industry> IndustryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("Data.FK_Business_Industry", "Industry");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Industry>("Data.FK_Business_Industry", "Industry", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_BusinessData_Business", "BusinessData")]
        public EntityCollection<BusinessData> BusinessDatas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<BusinessData>("Data.FK_BusinessData_Business", "BusinessData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<BusinessData>("Data.FK_BusinessData_Business", "BusinessData", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_Business_State", "State")]
        public State State
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("Data.FK_Business_State", "State").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("Data.FK_Business_State", "State").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<State> StateReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("Data.FK_Business_State", "State");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<State>("Data.FK_Business_State", "State", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "BusinessCity", "City")]
        public EntityCollection<City> Cities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<City>("Data.BusinessCity", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<City>("Data.BusinessCity", "City", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Data", Name="BusinessData")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class BusinessData : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new BusinessData object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="year">Initial value of the Year property.</param>
        /// <param name="quarter">Initial value of the Quarter property.</param>
        /// <param name="geographicLocationId">Initial value of the GeographicLocationId property.</param>
        /// <param name="businessId">Initial value of the BusinessId property.</param>
        public static BusinessData CreateBusinessData(global::System.Int64 id, global::System.Int32 year, global::System.Int32 quarter, global::System.Int64 geographicLocationId, global::System.Int64 businessId)
        {
            BusinessData businessData = new BusinessData();
            businessData.Id = id;
            businessData.Year = year;
            businessData.Quarter = quarter;
            businessData.GeographicLocationId = geographicLocationId;
            businessData.BusinessId = businessId;
            return businessData;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Year
        {
            get
            {
                return _Year;
            }
            set
            {
                OnYearChanging(value);
                ReportPropertyChanging("Year");
                _Year = StructuralObject.SetValidValue(value, "Year");
                ReportPropertyChanged("Year");
                OnYearChanged();
            }
        }
        private global::System.Int32 _Year;
        partial void OnYearChanging(global::System.Int32 value);
        partial void OnYearChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Quarter
        {
            get
            {
                return _Quarter;
            }
            set
            {
                OnQuarterChanging(value);
                ReportPropertyChanging("Quarter");
                _Quarter = StructuralObject.SetValidValue(value, "Quarter");
                ReportPropertyChanged("Quarter");
                OnQuarterChanged();
            }
        }
        private global::System.Int32 _Quarter;
        partial void OnQuarterChanging(global::System.Int32 value);
        partial void OnQuarterChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> IndustryId
        {
            get
            {
                return _IndustryId;
            }
            set
            {
                OnIndustryIdChanging(value);
                ReportPropertyChanging("IndustryId");
                _IndustryId = StructuralObject.SetValidValue(value, "IndustryId");
                ReportPropertyChanged("IndustryId");
                OnIndustryIdChanged();
            }
        }
        private Nullable<global::System.Int64> _IndustryId;
        partial void OnIndustryIdChanging(Nullable<global::System.Int64> value);
        partial void OnIndustryIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 GeographicLocationId
        {
            get
            {
                return _GeographicLocationId;
            }
            set
            {
                OnGeographicLocationIdChanging(value);
                ReportPropertyChanging("GeographicLocationId");
                _GeographicLocationId = StructuralObject.SetValidValue(value, "GeographicLocationId");
                ReportPropertyChanged("GeographicLocationId");
                OnGeographicLocationIdChanged();
            }
        }
        private global::System.Int64 _GeographicLocationId;
        partial void OnGeographicLocationIdChanging(global::System.Int64 value);
        partial void OnGeographicLocationIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 BusinessId
        {
            get
            {
                return _BusinessId;
            }
            set
            {
                OnBusinessIdChanging(value);
                ReportPropertyChanging("BusinessId");
                _BusinessId = StructuralObject.SetValidValue(value, "BusinessId");
                ReportPropertyChanged("BusinessId");
                OnBusinessIdChanged();
            }
        }
        private global::System.Int64 _BusinessId;
        partial void OnBusinessIdChanging(global::System.Int64 value);
        partial void OnBusinessIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> BranchTypeCode
        {
            get
            {
                return _BranchTypeCode;
            }
            set
            {
                OnBranchTypeCodeChanging(value);
                ReportPropertyChanging("BranchTypeCode");
                _BranchTypeCode = StructuralObject.SetValidValue(value, "BranchTypeCode");
                ReportPropertyChanged("BranchTypeCode");
                OnBranchTypeCodeChanged();
            }
        }
        private Nullable<global::System.Int32> _BranchTypeCode;
        partial void OnBranchTypeCodeChanging(Nullable<global::System.Int32> value);
        partial void OnBranchTypeCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> Revenue
        {
            get
            {
                return _Revenue;
            }
            set
            {
                OnRevenueChanging(value);
                ReportPropertyChanging("Revenue");
                _Revenue = StructuralObject.SetValidValue(value, "Revenue");
                ReportPropertyChanged("Revenue");
                OnRevenueChanged();
            }
        }
        private Nullable<global::System.Int64> _Revenue;
        partial void OnRevenueChanging(Nullable<global::System.Int64> value);
        partial void OnRevenueChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> Employees
        {
            get
            {
                return _Employees;
            }
            set
            {
                OnEmployeesChanging(value);
                ReportPropertyChanging("Employees");
                _Employees = StructuralObject.SetValidValue(value, "Employees");
                ReportPropertyChanged("Employees");
                OnEmployeesChanged();
            }
        }
        private Nullable<global::System.Int64> _Employees;
        partial void OnEmployeesChanging(Nullable<global::System.Int64> value);
        partial void OnEmployeesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> YearStarted
        {
            get
            {
                return _YearStarted;
            }
            set
            {
                OnYearStartedChanging(value);
                ReportPropertyChanging("YearStarted");
                _YearStarted = StructuralObject.SetValidValue(value, "YearStarted");
                ReportPropertyChanged("YearStarted");
                OnYearStartedChanged();
            }
        }
        private Nullable<global::System.Int32> _YearStarted;
        partial void OnYearStartedChanging(Nullable<global::System.Int32> value);
        partial void OnYearStartedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> OperatingCost
        {
            get
            {
                return _OperatingCost;
            }
            set
            {
                OnOperatingCostChanging(value);
                ReportPropertyChanging("OperatingCost");
                _OperatingCost = StructuralObject.SetValidValue(value, "OperatingCost");
                ReportPropertyChanged("OperatingCost");
                OnOperatingCostChanged();
            }
        }
        private Nullable<global::System.Int64> _OperatingCost;
        partial void OnOperatingCostChanging(Nullable<global::System.Int64> value);
        partial void OnOperatingCostChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> NetProfit
        {
            get
            {
                return _NetProfit;
            }
            set
            {
                OnNetProfitChanging(value);
                ReportPropertyChanging("NetProfit");
                _NetProfit = StructuralObject.SetValidValue(value, "NetProfit");
                ReportPropertyChanged("NetProfit");
                OnNetProfitChanged();
            }
        }
        private Nullable<global::System.Int64> _NetProfit;
        partial void OnNetProfitChanging(Nullable<global::System.Int64> value);
        partial void OnNetProfitChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> DebtEquityRatio
        {
            get
            {
                return _DebtEquityRatio;
            }
            set
            {
                OnDebtEquityRatioChanging(value);
                ReportPropertyChanging("DebtEquityRatio");
                _DebtEquityRatio = StructuralObject.SetValidValue(value, "DebtEquityRatio");
                ReportPropertyChanged("DebtEquityRatio");
                OnDebtEquityRatioChanged();
            }
        }
        private Nullable<global::System.Double> _DebtEquityRatio;
        partial void OnDebtEquityRatioChanging(Nullable<global::System.Double> value);
        partial void OnDebtEquityRatioChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> NetWorth
        {
            get
            {
                return _NetWorth;
            }
            set
            {
                OnNetWorthChanging(value);
                ReportPropertyChanging("NetWorth");
                _NetWorth = StructuralObject.SetValidValue(value, "NetWorth");
                ReportPropertyChanged("NetWorth");
                OnNetWorthChanged();
            }
        }
        private Nullable<global::System.Int64> _NetWorth;
        partial void OnNetWorthChanging(Nullable<global::System.Int64> value);
        partial void OnNetWorthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CostOfPersonnel
        {
            get
            {
                return _CostOfPersonnel;
            }
            set
            {
                OnCostOfPersonnelChanging(value);
                ReportPropertyChanging("CostOfPersonnel");
                _CostOfPersonnel = StructuralObject.SetValidValue(value, "CostOfPersonnel");
                ReportPropertyChanged("CostOfPersonnel");
                OnCostOfPersonnelChanged();
            }
        }
        private Nullable<global::System.Int64> _CostOfPersonnel;
        partial void OnCostOfPersonnelChanging(Nullable<global::System.Int64> value);
        partial void OnCostOfPersonnelChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> TotalBranchesNumber
        {
            get
            {
                return _TotalBranchesNumber;
            }
            set
            {
                OnTotalBranchesNumberChanging(value);
                ReportPropertyChanging("TotalBranchesNumber");
                _TotalBranchesNumber = StructuralObject.SetValidValue(value, "TotalBranchesNumber");
                ReportPropertyChanged("TotalBranchesNumber");
                OnTotalBranchesNumberChanged();
            }
        }
        private Nullable<global::System.Int64> _TotalBranchesNumber;
        partial void OnTotalBranchesNumberChanging(Nullable<global::System.Int64> value);
        partial void OnTotalBranchesNumberChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_BusinessData_Business", "Business")]
        public Business Business
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Business>("Data.FK_BusinessData_Business", "Business").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Business>("Data.FK_BusinessData_Business", "Business").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Business> BusinessReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Business>("Data.FK_BusinessData_Business", "Business");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Business>("Data.FK_BusinessData_Business", "Business", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_BusinessData_GeographicLocation", "GeographicLocation")]
        public GeographicLocation GeographicLocation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("Data.FK_BusinessData_GeographicLocation", "GeographicLocation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("Data.FK_BusinessData_GeographicLocation", "GeographicLocation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GeographicLocation> GeographicLocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("Data.FK_BusinessData_GeographicLocation", "GeographicLocation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GeographicLocation>("Data.FK_BusinessData_GeographicLocation", "GeographicLocation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_BusinessData_Industry", "Industry")]
        public Industry Industry
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("Data.FK_BusinessData_Industry", "Industry").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("Data.FK_BusinessData_Industry", "Industry").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Industry> IndustryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("Data.FK_BusinessData_Industry", "Industry");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Industry>("Data.FK_BusinessData_Industry", "Industry", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Data", Name="City")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class City : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new City object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="countyId">Initial value of the CountyId property.</param>
        /// <param name="stateId">Initial value of the StateId property.</param>
        /// <param name="isActive">Initial value of the IsActive property.</param>
        public static City CreateCity(global::System.Int64 id, global::System.String name, global::System.Int64 countyId, global::System.Int64 stateId, global::System.Boolean isActive)
        {
            City city = new City();
            city.Id = id;
            city.Name = name;
            city.CountyId = countyId;
            city.StateId = stateId;
            city.IsActive = isActive;
            return city;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SEOKey
        {
            get
            {
                return _SEOKey;
            }
            set
            {
                OnSEOKeyChanging(value);
                ReportPropertyChanging("SEOKey");
                _SEOKey = StructuralObject.SetValidValue(value, true, "SEOKey");
                ReportPropertyChanged("SEOKey");
                OnSEOKeyChanged();
            }
        }
        private global::System.String _SEOKey;
        partial void OnSEOKeyChanging(global::System.String value);
        partial void OnSEOKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 CountyId
        {
            get
            {
                return _CountyId;
            }
            set
            {
                OnCountyIdChanging(value);
                ReportPropertyChanging("CountyId");
                _CountyId = StructuralObject.SetValidValue(value, "CountyId");
                ReportPropertyChanged("CountyId");
                OnCountyIdChanged();
            }
        }
        private global::System.Int64 _CountyId;
        partial void OnCountyIdChanging(global::System.Int64 value);
        partial void OnCountyIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 StateId
        {
            get
            {
                return _StateId;
            }
            set
            {
                OnStateIdChanging(value);
                ReportPropertyChanging("StateId");
                _StateId = StructuralObject.SetValidValue(value, "StateId");
                ReportPropertyChanged("StateId");
                OnStateIdChanged();
            }
        }
        private global::System.Int64 _StateId;
        partial void OnStateIdChanging(global::System.Int64 value);
        partial void OnStateIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value, "IsActive");
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_City_GeographicLocation", "GeographicLocation")]
        public GeographicLocation GeographicLocation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("Data.FK_City_GeographicLocation", "GeographicLocation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("Data.FK_City_GeographicLocation", "GeographicLocation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GeographicLocation> GeographicLocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("Data.FK_City_GeographicLocation", "GeographicLocation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GeographicLocation>("Data.FK_City_GeographicLocation", "GeographicLocation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_City_State", "State")]
        public State State
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("Data.FK_City_State", "State").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("Data.FK_City_State", "State").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<State> StateReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("Data.FK_City_State", "State");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<State>("Data.FK_City_State", "State", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_City_County", "County")]
        public County County
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<County>("Data.FK_City_County", "County").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<County>("Data.FK_City_County", "County").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<County> CountyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<County>("Data.FK_City_County", "County");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<County>("Data.FK_City_County", "County", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_Place_City", "Place")]
        public EntityCollection<Place> Places
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Place>("Data.FK_Place_City", "Place");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Place>("Data.FK_Place_City", "Place", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "BusinessCity", "Business")]
        public EntityCollection<Business> Businesses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Business>("Data.BusinessCity", "Business");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Business>("Data.BusinessCity", "Business", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Data", Name="County")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class County : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new County object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="abbreviation">Initial value of the Abbreviation property.</param>
        /// <param name="sEOKey">Initial value of the SEOKey property.</param>
        /// <param name="stateId">Initial value of the StateId property.</param>
        public static County CreateCounty(global::System.Int64 id, global::System.String name, global::System.String abbreviation, global::System.String sEOKey, global::System.Int64 stateId)
        {
            County county = new County();
            county.Id = id;
            county.Name = name;
            county.Abbreviation = abbreviation;
            county.SEOKey = sEOKey;
            county.StateId = stateId;
            return county;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Abbreviation
        {
            get
            {
                return _Abbreviation;
            }
            set
            {
                OnAbbreviationChanging(value);
                ReportPropertyChanging("Abbreviation");
                _Abbreviation = StructuralObject.SetValidValue(value, false, "Abbreviation");
                ReportPropertyChanged("Abbreviation");
                OnAbbreviationChanged();
            }
        }
        private global::System.String _Abbreviation;
        partial void OnAbbreviationChanging(global::System.String value);
        partial void OnAbbreviationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SEOKey
        {
            get
            {
                return _SEOKey;
            }
            set
            {
                OnSEOKeyChanging(value);
                ReportPropertyChanging("SEOKey");
                _SEOKey = StructuralObject.SetValidValue(value, false, "SEOKey");
                ReportPropertyChanged("SEOKey");
                OnSEOKeyChanged();
            }
        }
        private global::System.String _SEOKey;
        partial void OnSEOKeyChanging(global::System.String value);
        partial void OnSEOKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 StateId
        {
            get
            {
                return _StateId;
            }
            set
            {
                OnStateIdChanging(value);
                ReportPropertyChanging("StateId");
                _StateId = StructuralObject.SetValidValue(value, "StateId");
                ReportPropertyChanged("StateId");
                OnStateIdChanged();
            }
        }
        private global::System.Int64 _StateId;
        partial void OnStateIdChanging(global::System.Int64 value);
        partial void OnStateIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_City_County", "City")]
        public EntityCollection<City> Cities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<City>("Data.FK_City_County", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<City>("Data.FK_City_County", "City", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_County_GeographicLocation", "GeographicLocation")]
        public GeographicLocation GeographicLocation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("Data.FK_County_GeographicLocation", "GeographicLocation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("Data.FK_County_GeographicLocation", "GeographicLocation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GeographicLocation> GeographicLocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("Data.FK_County_GeographicLocation", "GeographicLocation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GeographicLocation>("Data.FK_County_GeographicLocation", "GeographicLocation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_County_State", "State")]
        public State State
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("Data.FK_County_State", "State").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("Data.FK_County_State", "State").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<State> StateReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("Data.FK_County_State", "State");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<State>("Data.FK_County_State", "State", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_Place_County", "Place")]
        public EntityCollection<Place> Places
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Place>("Data.FK_Place_County", "Place");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Place>("Data.FK_Place_County", "Place", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Data", Name="GeographicLocation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class GeographicLocation : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new GeographicLocation object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="granularityId">Initial value of the GranularityId property.</param>
        public static GeographicLocation CreateGeographicLocation(global::System.Int64 id, global::System.Int64 granularityId)
        {
            GeographicLocation geographicLocation = new GeographicLocation();
            geographicLocation.Id = id;
            geographicLocation.GranularityId = granularityId;
            return geographicLocation;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 GranularityId
        {
            get
            {
                return _GranularityId;
            }
            set
            {
                OnGranularityIdChanging(value);
                ReportPropertyChanging("GranularityId");
                _GranularityId = StructuralObject.SetValidValue(value, "GranularityId");
                ReportPropertyChanged("GranularityId");
                OnGranularityIdChanged();
            }
        }
        private global::System.Int64 _GranularityId;
        partial void OnGranularityIdChanging(global::System.Int64 value);
        partial void OnGranularityIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ShortName
        {
            get
            {
                return _ShortName;
            }
            set
            {
                OnShortNameChanging(value);
                ReportPropertyChanging("ShortName");
                _ShortName = StructuralObject.SetValidValue(value, true, "ShortName");
                ReportPropertyChanged("ShortName");
                OnShortNameChanged();
            }
        }
        private global::System.String _ShortName;
        partial void OnShortNameChanging(global::System.String value);
        partial void OnShortNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LongName
        {
            get
            {
                return _LongName;
            }
            set
            {
                OnLongNameChanging(value);
                ReportPropertyChanging("LongName");
                _LongName = StructuralObject.SetValidValue(value, true, "LongName");
                ReportPropertyChanged("LongName");
                OnLongNameChanged();
            }
        }
        private global::System.String _LongName;
        partial void OnLongNameChanging(global::System.String value);
        partial void OnLongNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> COD_PRO
        {
            get
            {
                return _COD_PRO;
            }
            set
            {
                OnCOD_PROChanging(value);
                ReportPropertyChanging("COD_PRO");
                _COD_PRO = StructuralObject.SetValidValue(value, "COD_PRO");
                ReportPropertyChanged("COD_PRO");
                OnCOD_PROChanged();
            }
        }
        private Nullable<global::System.Int64> _COD_PRO;
        partial void OnCOD_PROChanging(Nullable<global::System.Int64> value);
        partial void OnCOD_PROChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> COD_REG
        {
            get
            {
                return _COD_REG;
            }
            set
            {
                OnCOD_REGChanging(value);
                ReportPropertyChanging("COD_REG");
                _COD_REG = StructuralObject.SetValidValue(value, "COD_REG");
                ReportPropertyChanged("COD_REG");
                OnCOD_REGChanged();
            }
        }
        private Nullable<global::System.Int64> _COD_REG;
        partial void OnCOD_REGChanging(Nullable<global::System.Int64> value);
        partial void OnCOD_REGChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> PRO_COM
        {
            get
            {
                return _PRO_COM;
            }
            set
            {
                OnPRO_COMChanging(value);
                ReportPropertyChanging("PRO_COM");
                _PRO_COM = StructuralObject.SetValidValue(value, "PRO_COM");
                ReportPropertyChanged("PRO_COM");
                OnPRO_COMChanged();
            }
        }
        private Nullable<global::System.Int64> _PRO_COM;
        partial void OnPRO_COMChanging(Nullable<global::System.Int64> value);
        partial void OnPRO_COMChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Frazione
        {
            get
            {
                return _Frazione;
            }
            set
            {
                OnFrazioneChanging(value);
                ReportPropertyChanging("Frazione");
                _Frazione = StructuralObject.SetValidValue(value, true, "Frazione");
                ReportPropertyChanged("Frazione");
                OnFrazioneChanged();
            }
        }
        private global::System.String _Frazione;
        partial void OnFrazioneChanging(global::System.String value);
        partial void OnFrazioneChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CapId
        {
            get
            {
                return _CapId;
            }
            set
            {
                OnCapIdChanging(value);
                ReportPropertyChanging("CapId");
                _CapId = StructuralObject.SetValidValue(value, "CapId");
                ReportPropertyChanged("CapId");
                OnCapIdChanged();
            }
        }
        private Nullable<global::System.Int64> _CapId;
        partial void OnCapIdChanging(Nullable<global::System.Int64> value);
        partial void OnCapIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CityId
        {
            get
            {
                return _CityId;
            }
            set
            {
                OnCityIdChanging(value);
                ReportPropertyChanging("CityId");
                _CityId = StructuralObject.SetValidValue(value, "CityId");
                ReportPropertyChanged("CityId");
                OnCityIdChanged();
            }
        }
        private Nullable<global::System.Int64> _CityId;
        partial void OnCityIdChanging(Nullable<global::System.Int64> value);
        partial void OnCityIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CountyId
        {
            get
            {
                return _CountyId;
            }
            set
            {
                OnCountyIdChanging(value);
                ReportPropertyChanging("CountyId");
                _CountyId = StructuralObject.SetValidValue(value, "CountyId");
                ReportPropertyChanged("CountyId");
                OnCountyIdChanged();
            }
        }
        private Nullable<global::System.Int64> _CountyId;
        partial void OnCountyIdChanging(Nullable<global::System.Int64> value);
        partial void OnCountyIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_BusinessData_GeographicLocation", "BusinessData")]
        public EntityCollection<BusinessData> BusinessDatas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<BusinessData>("Data.FK_BusinessData_GeographicLocation", "BusinessData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<BusinessData>("Data.FK_BusinessData_GeographicLocation", "BusinessData", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_City_GeographicLocation", "City")]
        public City City
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("Data.FK_City_GeographicLocation", "City").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("Data.FK_City_GeographicLocation", "City").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<City> CityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("Data.FK_City_GeographicLocation", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<City>("Data.FK_City_GeographicLocation", "City", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_GeographicLocation_Granularity", "Granularity")]
        public Granularity Granularity
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Granularity>("Data.FK_GeographicLocation_Granularity", "Granularity").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Granularity>("Data.FK_GeographicLocation_Granularity", "Granularity").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Granularity> GranularityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Granularity>("Data.FK_GeographicLocation_Granularity", "Granularity");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Granularity>("Data.FK_GeographicLocation_Granularity", "Granularity", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_IndustryData_GeographicLocation", "IndustryData")]
        public EntityCollection<IndustryData> IndustryDatas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<IndustryData>("Data.FK_IndustryData_GeographicLocation", "IndustryData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<IndustryData>("Data.FK_IndustryData_GeographicLocation", "IndustryData", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_State_GeographicLocation", "State")]
        public State State
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("Data.FK_State_GeographicLocation", "State").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("Data.FK_State_GeographicLocation", "State").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<State> StateReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("Data.FK_State_GeographicLocation", "State");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<State>("Data.FK_State_GeographicLocation", "State", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "GeographicLocationGeographicLocation", "GeographicLocations")]
        public EntityCollection<GeographicLocation> IntersectedGeographicLocations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<GeographicLocation>("Data.GeographicLocationGeographicLocation", "GeographicLocations");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<GeographicLocation>("Data.GeographicLocationGeographicLocation", "GeographicLocations", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "GeographicLocationGeographicLocation", "IntersectedGeographicLocations")]
        public EntityCollection<GeographicLocation> GeographicLocations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<GeographicLocation>("Data.GeographicLocationGeographicLocation", "IntersectedGeographicLocations");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<GeographicLocation>("Data.GeographicLocationGeographicLocation", "IntersectedGeographicLocations", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_Geography_GeographicLocation", "Geography")]
        public EntityCollection<Geography> Geographies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Geography>("Data.FK_Geography_GeographicLocation", "Geography");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Geography>("Data.FK_Geography_GeographicLocation", "Geography", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_County_GeographicLocation", "County")]
        public County County
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<County>("Data.FK_County_GeographicLocation", "County").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<County>("Data.FK_County_GeographicLocation", "County").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<County> CountyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<County>("Data.FK_County_GeographicLocation", "County");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<County>("Data.FK_County_GeographicLocation", "County", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_Place_GeographicLocation", "Place")]
        public Place Place
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Place>("Data.FK_Place_GeographicLocation", "Place").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Place>("Data.FK_Place_GeographicLocation", "Place").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Place> PlaceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Place>("Data.FK_Place_GeographicLocation", "Place");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Place>("Data.FK_Place_GeographicLocation", "Place", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Data", Name="Geography")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Geography : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Geography object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        public static Geography CreateGeography(global::System.Int64 id)
        {
            Geography geography = new Geography();
            geography.Id = id;
            return geography;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Data.Spatial.DbGeography Polygon
        {
            get
            {
                return _Polygon;
            }
            set
            {
                OnPolygonChanging(value);
                ReportPropertyChanging("Polygon");
                _Polygon = StructuralObject.SetValidValue(value, true, "Polygon");
                ReportPropertyChanged("Polygon");
                OnPolygonChanged();
            }
        }
        private global::System.Data.Spatial.DbGeography _Polygon;
        partial void OnPolygonChanging(global::System.Data.Spatial.DbGeography value);
        partial void OnPolygonChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> GeographicLocationId
        {
            get
            {
                return _GeographicLocationId;
            }
            set
            {
                OnGeographicLocationIdChanging(value);
                ReportPropertyChanging("GeographicLocationId");
                _GeographicLocationId = StructuralObject.SetValidValue(value, "GeographicLocationId");
                ReportPropertyChanged("GeographicLocationId");
                OnGeographicLocationIdChanged();
            }
        }
        private Nullable<global::System.Int64> _GeographicLocationId;
        partial void OnGeographicLocationIdChanging(Nullable<global::System.Int64> value);
        partial void OnGeographicLocationIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> North
        {
            get
            {
                return _North;
            }
            set
            {
                OnNorthChanging(value);
                ReportPropertyChanging("North");
                _North = StructuralObject.SetValidValue(value, "North");
                ReportPropertyChanged("North");
                OnNorthChanged();
            }
        }
        private Nullable<global::System.Double> _North;
        partial void OnNorthChanging(Nullable<global::System.Double> value);
        partial void OnNorthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> South
        {
            get
            {
                return _South;
            }
            set
            {
                OnSouthChanging(value);
                ReportPropertyChanging("South");
                _South = StructuralObject.SetValidValue(value, "South");
                ReportPropertyChanged("South");
                OnSouthChanged();
            }
        }
        private Nullable<global::System.Double> _South;
        partial void OnSouthChanging(Nullable<global::System.Double> value);
        partial void OnSouthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> East
        {
            get
            {
                return _East;
            }
            set
            {
                OnEastChanging(value);
                ReportPropertyChanging("East");
                _East = StructuralObject.SetValidValue(value, "East");
                ReportPropertyChanged("East");
                OnEastChanged();
            }
        }
        private Nullable<global::System.Double> _East;
        partial void OnEastChanging(Nullable<global::System.Double> value);
        partial void OnEastChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> West
        {
            get
            {
                return _West;
            }
            set
            {
                OnWestChanging(value);
                ReportPropertyChanging("West");
                _West = StructuralObject.SetValidValue(value, "West");
                ReportPropertyChanged("West");
                OnWestChanged();
            }
        }
        private Nullable<global::System.Double> _West;
        partial void OnWestChanging(Nullable<global::System.Double> value);
        partial void OnWestChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> CenterLat
        {
            get
            {
                return _CenterLat;
            }
            set
            {
                OnCenterLatChanging(value);
                ReportPropertyChanging("CenterLat");
                _CenterLat = StructuralObject.SetValidValue(value, "CenterLat");
                ReportPropertyChanged("CenterLat");
                OnCenterLatChanged();
            }
        }
        private Nullable<global::System.Double> _CenterLat;
        partial void OnCenterLatChanging(Nullable<global::System.Double> value);
        partial void OnCenterLatChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> CenterLong
        {
            get
            {
                return _CenterLong;
            }
            set
            {
                OnCenterLongChanging(value);
                ReportPropertyChanging("CenterLong");
                _CenterLong = StructuralObject.SetValidValue(value, "CenterLong");
                ReportPropertyChanged("CenterLong");
                OnCenterLongChanged();
            }
        }
        private Nullable<global::System.Double> _CenterLong;
        partial void OnCenterLongChanging(Nullable<global::System.Double> value);
        partial void OnCenterLongChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> COD_REG
        {
            get
            {
                return _COD_REG;
            }
            set
            {
                OnCOD_REGChanging(value);
                ReportPropertyChanging("COD_REG");
                _COD_REG = StructuralObject.SetValidValue(value, "COD_REG");
                ReportPropertyChanged("COD_REG");
                OnCOD_REGChanged();
            }
        }
        private Nullable<global::System.Int64> _COD_REG;
        partial void OnCOD_REGChanging(Nullable<global::System.Int64> value);
        partial void OnCOD_REGChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> COD_PRO
        {
            get
            {
                return _COD_PRO;
            }
            set
            {
                OnCOD_PROChanging(value);
                ReportPropertyChanging("COD_PRO");
                _COD_PRO = StructuralObject.SetValidValue(value, "COD_PRO");
                ReportPropertyChanged("COD_PRO");
                OnCOD_PROChanged();
            }
        }
        private Nullable<global::System.Int64> _COD_PRO;
        partial void OnCOD_PROChanging(Nullable<global::System.Int64> value);
        partial void OnCOD_PROChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> PRO_COM
        {
            get
            {
                return _PRO_COM;
            }
            set
            {
                OnPRO_COMChanging(value);
                ReportPropertyChanging("PRO_COM");
                _PRO_COM = StructuralObject.SetValidValue(value, "PRO_COM");
                ReportPropertyChanged("PRO_COM");
                OnPRO_COMChanged();
            }
        }
        private Nullable<global::System.Int64> _PRO_COM;
        partial void OnPRO_COMChanging(Nullable<global::System.Int64> value);
        partial void OnPRO_COMChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CapId
        {
            get
            {
                return _CapId;
            }
            set
            {
                OnCapIdChanging(value);
                ReportPropertyChanging("CapId");
                _CapId = StructuralObject.SetValidValue(value, "CapId");
                ReportPropertyChanged("CapId");
                OnCapIdChanged();
            }
        }
        private Nullable<global::System.Int64> _CapId;
        partial void OnCapIdChanging(Nullable<global::System.Int64> value);
        partial void OnCapIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_Geography_GeographicLocation", "GeographicLocation")]
        public GeographicLocation GeographicLocation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("Data.FK_Geography_GeographicLocation", "GeographicLocation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("Data.FK_Geography_GeographicLocation", "GeographicLocation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GeographicLocation> GeographicLocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("Data.FK_Geography_GeographicLocation", "GeographicLocation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GeographicLocation>("Data.FK_Geography_GeographicLocation", "GeographicLocation", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Data", Name="Granularity")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Granularity : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Granularity object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Granularity CreateGranularity(global::System.Int64 id, global::System.String name)
        {
            Granularity granularity = new Granularity();
            granularity.Id = id;
            granularity.Name = name;
            return granularity;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_GeographicLocation_Granularity", "GeographicLocation")]
        public EntityCollection<GeographicLocation> GeographicLocations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<GeographicLocation>("Data.FK_GeographicLocation_Granularity", "GeographicLocation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<GeographicLocation>("Data.FK_GeographicLocation_Granularity", "GeographicLocation", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Data", Name="Industry")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Industry : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Industry object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="cervedAteco">Initial value of the CervedAteco property.</param>
        /// <param name="officialAteco">Initial value of the OfficialAteco property.</param>
        public static Industry CreateIndustry(global::System.Int64 id, global::System.String cervedAteco, global::System.String officialAteco)
        {
            Industry industry = new Industry();
            industry.Id = id;
            industry.CervedAteco = cervedAteco;
            industry.OfficialAteco = officialAteco;
            return industry;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CervedAteco
        {
            get
            {
                return _CervedAteco;
            }
            set
            {
                OnCervedAtecoChanging(value);
                ReportPropertyChanging("CervedAteco");
                _CervedAteco = StructuralObject.SetValidValue(value, false, "CervedAteco");
                ReportPropertyChanged("CervedAteco");
                OnCervedAtecoChanged();
            }
        }
        private global::System.String _CervedAteco;
        partial void OnCervedAtecoChanging(global::System.String value);
        partial void OnCervedAtecoChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String OfficialAteco
        {
            get
            {
                return _OfficialAteco;
            }
            set
            {
                OnOfficialAtecoChanging(value);
                ReportPropertyChanging("OfficialAteco");
                _OfficialAteco = StructuralObject.SetValidValue(value, false, "OfficialAteco");
                ReportPropertyChanged("OfficialAteco");
                OnOfficialAtecoChanged();
            }
        }
        private global::System.String _OfficialAteco;
        partial void OnOfficialAtecoChanging(global::System.String value);
        partial void OnOfficialAtecoChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value, "IsActive");
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private Nullable<global::System.Boolean> _IsActive;
        partial void OnIsActiveChanging(Nullable<global::System.Boolean> value);
        partial void OnIsActiveChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SEOKey
        {
            get
            {
                return _SEOKey;
            }
            set
            {
                OnSEOKeyChanging(value);
                ReportPropertyChanging("SEOKey");
                _SEOKey = StructuralObject.SetValidValue(value, true, "SEOKey");
                ReportPropertyChanged("SEOKey");
                OnSEOKeyChanged();
            }
        }
        private global::System.String _SEOKey;
        partial void OnSEOKeyChanging(global::System.String value);
        partial void OnSEOKeyChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_Business_Industry", "Business")]
        public EntityCollection<Business> Businesses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Business>("Data.FK_Business_Industry", "Business");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Business>("Data.FK_Business_Industry", "Business", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_BusinessData_Industry", "BusinessData")]
        public EntityCollection<BusinessData> BusinessDatas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<BusinessData>("Data.FK_BusinessData_Industry", "BusinessData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<BusinessData>("Data.FK_BusinessData_Industry", "BusinessData", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_IndustryData_Industry", "IndustryData")]
        public EntityCollection<IndustryData> IndustryDatas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<IndustryData>("Data.FK_IndustryData_Industry", "IndustryData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<IndustryData>("Data.FK_IndustryData_Industry", "IndustryData", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_IndustryKeyword_Industry", "IndustryKeyword")]
        public EntityCollection<IndustryKeyword> IndustryKeywords
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<IndustryKeyword>("Data.FK_IndustryKeyword_Industry", "IndustryKeyword");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<IndustryKeyword>("Data.FK_IndustryKeyword_Industry", "IndustryKeyword", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Data", Name="IndustryData")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class IndustryData : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new IndustryData object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="year">Initial value of the Year property.</param>
        /// <param name="quarter">Initial value of the Quarter property.</param>
        /// <param name="geographicLocationId">Initial value of the GeographicLocationId property.</param>
        public static IndustryData CreateIndustryData(global::System.Int64 id, global::System.Int32 year, global::System.Int32 quarter, global::System.Int64 geographicLocationId)
        {
            IndustryData industryData = new IndustryData();
            industryData.Id = id;
            industryData.Year = year;
            industryData.Quarter = quarter;
            industryData.GeographicLocationId = geographicLocationId;
            return industryData;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Year
        {
            get
            {
                return _Year;
            }
            set
            {
                OnYearChanging(value);
                ReportPropertyChanging("Year");
                _Year = StructuralObject.SetValidValue(value, "Year");
                ReportPropertyChanged("Year");
                OnYearChanged();
            }
        }
        private global::System.Int32 _Year;
        partial void OnYearChanging(global::System.Int32 value);
        partial void OnYearChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Quarter
        {
            get
            {
                return _Quarter;
            }
            set
            {
                OnQuarterChanging(value);
                ReportPropertyChanging("Quarter");
                _Quarter = StructuralObject.SetValidValue(value, "Quarter");
                ReportPropertyChanged("Quarter");
                OnQuarterChanged();
            }
        }
        private global::System.Int32 _Quarter;
        partial void OnQuarterChanging(global::System.Int32 value);
        partial void OnQuarterChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> IndustryId
        {
            get
            {
                return _IndustryId;
            }
            set
            {
                OnIndustryIdChanging(value);
                ReportPropertyChanging("IndustryId");
                _IndustryId = StructuralObject.SetValidValue(value, "IndustryId");
                ReportPropertyChanged("IndustryId");
                OnIndustryIdChanged();
            }
        }
        private Nullable<global::System.Int64> _IndustryId;
        partial void OnIndustryIdChanging(Nullable<global::System.Int64> value);
        partial void OnIndustryIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 GeographicLocationId
        {
            get
            {
                return _GeographicLocationId;
            }
            set
            {
                OnGeographicLocationIdChanging(value);
                ReportPropertyChanging("GeographicLocationId");
                _GeographicLocationId = StructuralObject.SetValidValue(value, "GeographicLocationId");
                ReportPropertyChanged("GeographicLocationId");
                OnGeographicLocationIdChanged();
            }
        }
        private global::System.Int64 _GeographicLocationId;
        partial void OnGeographicLocationIdChanging(global::System.Int64 value);
        partial void OnGeographicLocationIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> AverageEmployees
        {
            get
            {
                return _AverageEmployees;
            }
            set
            {
                OnAverageEmployeesChanging(value);
                ReportPropertyChanging("AverageEmployees");
                _AverageEmployees = StructuralObject.SetValidValue(value, "AverageEmployees");
                ReportPropertyChanged("AverageEmployees");
                OnAverageEmployeesChanged();
            }
        }
        private Nullable<global::System.Int64> _AverageEmployees;
        partial void OnAverageEmployeesChanging(Nullable<global::System.Int64> value);
        partial void OnAverageEmployeesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> TotalEmployees
        {
            get
            {
                return _TotalEmployees;
            }
            set
            {
                OnTotalEmployeesChanging(value);
                ReportPropertyChanging("TotalEmployees");
                _TotalEmployees = StructuralObject.SetValidValue(value, "TotalEmployees");
                ReportPropertyChanged("TotalEmployees");
                OnTotalEmployeesChanged();
            }
        }
        private Nullable<global::System.Int64> _TotalEmployees;
        partial void OnTotalEmployeesChanging(Nullable<global::System.Int64> value);
        partial void OnTotalEmployeesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> MedianEmployees
        {
            get
            {
                return _MedianEmployees;
            }
            set
            {
                OnMedianEmployeesChanging(value);
                ReportPropertyChanging("MedianEmployees");
                _MedianEmployees = StructuralObject.SetValidValue(value, "MedianEmployees");
                ReportPropertyChanged("MedianEmployees");
                OnMedianEmployeesChanged();
            }
        }
        private Nullable<global::System.Int64> _MedianEmployees;
        partial void OnMedianEmployeesChanging(Nullable<global::System.Int64> value);
        partial void OnMedianEmployeesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> TotalRevenue
        {
            get
            {
                return _TotalRevenue;
            }
            set
            {
                OnTotalRevenueChanging(value);
                ReportPropertyChanging("TotalRevenue");
                _TotalRevenue = StructuralObject.SetValidValue(value, "TotalRevenue");
                ReportPropertyChanged("TotalRevenue");
                OnTotalRevenueChanged();
            }
        }
        private Nullable<global::System.Int64> _TotalRevenue;
        partial void OnTotalRevenueChanging(Nullable<global::System.Int64> value);
        partial void OnTotalRevenueChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> AverageRevenue
        {
            get
            {
                return _AverageRevenue;
            }
            set
            {
                OnAverageRevenueChanging(value);
                ReportPropertyChanging("AverageRevenue");
                _AverageRevenue = StructuralObject.SetValidValue(value, "AverageRevenue");
                ReportPropertyChanged("AverageRevenue");
                OnAverageRevenueChanged();
            }
        }
        private Nullable<global::System.Int64> _AverageRevenue;
        partial void OnAverageRevenueChanging(Nullable<global::System.Int64> value);
        partial void OnAverageRevenueChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> MedianRevenue
        {
            get
            {
                return _MedianRevenue;
            }
            set
            {
                OnMedianRevenueChanging(value);
                ReportPropertyChanging("MedianRevenue");
                _MedianRevenue = StructuralObject.SetValidValue(value, "MedianRevenue");
                ReportPropertyChanged("MedianRevenue");
                OnMedianRevenueChanged();
            }
        }
        private Nullable<global::System.Int64> _MedianRevenue;
        partial void OnMedianRevenueChanging(Nullable<global::System.Int64> value);
        partial void OnMedianRevenueChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> TotalOperatingCost
        {
            get
            {
                return _TotalOperatingCost;
            }
            set
            {
                OnTotalOperatingCostChanging(value);
                ReportPropertyChanging("TotalOperatingCost");
                _TotalOperatingCost = StructuralObject.SetValidValue(value, "TotalOperatingCost");
                ReportPropertyChanged("TotalOperatingCost");
                OnTotalOperatingCostChanged();
            }
        }
        private Nullable<global::System.Int64> _TotalOperatingCost;
        partial void OnTotalOperatingCostChanging(Nullable<global::System.Int64> value);
        partial void OnTotalOperatingCostChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> AverageOperatingCost
        {
            get
            {
                return _AverageOperatingCost;
            }
            set
            {
                OnAverageOperatingCostChanging(value);
                ReportPropertyChanging("AverageOperatingCost");
                _AverageOperatingCost = StructuralObject.SetValidValue(value, "AverageOperatingCost");
                ReportPropertyChanged("AverageOperatingCost");
                OnAverageOperatingCostChanged();
            }
        }
        private Nullable<global::System.Int64> _AverageOperatingCost;
        partial void OnAverageOperatingCostChanging(Nullable<global::System.Int64> value);
        partial void OnAverageOperatingCostChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> TotalNetProfit
        {
            get
            {
                return _TotalNetProfit;
            }
            set
            {
                OnTotalNetProfitChanging(value);
                ReportPropertyChanging("TotalNetProfit");
                _TotalNetProfit = StructuralObject.SetValidValue(value, "TotalNetProfit");
                ReportPropertyChanged("TotalNetProfit");
                OnTotalNetProfitChanged();
            }
        }
        private Nullable<global::System.Int64> _TotalNetProfit;
        partial void OnTotalNetProfitChanging(Nullable<global::System.Int64> value);
        partial void OnTotalNetProfitChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> AverageNetProfit
        {
            get
            {
                return _AverageNetProfit;
            }
            set
            {
                OnAverageNetProfitChanging(value);
                ReportPropertyChanging("AverageNetProfit");
                _AverageNetProfit = StructuralObject.SetValidValue(value, "AverageNetProfit");
                ReportPropertyChanged("AverageNetProfit");
                OnAverageNetProfitChanged();
            }
        }
        private Nullable<global::System.Int64> _AverageNetProfit;
        partial void OnAverageNetProfitChanging(Nullable<global::System.Int64> value);
        partial void OnAverageNetProfitChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> TotalDebtEquityRatio
        {
            get
            {
                return _TotalDebtEquityRatio;
            }
            set
            {
                OnTotalDebtEquityRatioChanging(value);
                ReportPropertyChanging("TotalDebtEquityRatio");
                _TotalDebtEquityRatio = StructuralObject.SetValidValue(value, "TotalDebtEquityRatio");
                ReportPropertyChanged("TotalDebtEquityRatio");
                OnTotalDebtEquityRatioChanged();
            }
        }
        private Nullable<global::System.Double> _TotalDebtEquityRatio;
        partial void OnTotalDebtEquityRatioChanging(Nullable<global::System.Double> value);
        partial void OnTotalDebtEquityRatioChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> AverageDebtEquityRatio
        {
            get
            {
                return _AverageDebtEquityRatio;
            }
            set
            {
                OnAverageDebtEquityRatioChanging(value);
                ReportPropertyChanging("AverageDebtEquityRatio");
                _AverageDebtEquityRatio = StructuralObject.SetValidValue(value, "AverageDebtEquityRatio");
                ReportPropertyChanged("AverageDebtEquityRatio");
                OnAverageDebtEquityRatioChanged();
            }
        }
        private Nullable<global::System.Double> _AverageDebtEquityRatio;
        partial void OnAverageDebtEquityRatioChanging(Nullable<global::System.Double> value);
        partial void OnAverageDebtEquityRatioChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> TotalNetWorth
        {
            get
            {
                return _TotalNetWorth;
            }
            set
            {
                OnTotalNetWorthChanging(value);
                ReportPropertyChanging("TotalNetWorth");
                _TotalNetWorth = StructuralObject.SetValidValue(value, "TotalNetWorth");
                ReportPropertyChanged("TotalNetWorth");
                OnTotalNetWorthChanged();
            }
        }
        private Nullable<global::System.Int64> _TotalNetWorth;
        partial void OnTotalNetWorthChanging(Nullable<global::System.Int64> value);
        partial void OnTotalNetWorthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> AverageNetWorth
        {
            get
            {
                return _AverageNetWorth;
            }
            set
            {
                OnAverageNetWorthChanging(value);
                ReportPropertyChanging("AverageNetWorth");
                _AverageNetWorth = StructuralObject.SetValidValue(value, "AverageNetWorth");
                ReportPropertyChanged("AverageNetWorth");
                OnAverageNetWorthChanged();
            }
        }
        private Nullable<global::System.Int64> _AverageNetWorth;
        partial void OnAverageNetWorthChanging(Nullable<global::System.Int64> value);
        partial void OnAverageNetWorthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> BusinessCount
        {
            get
            {
                return _BusinessCount;
            }
            set
            {
                OnBusinessCountChanging(value);
                ReportPropertyChanging("BusinessCount");
                _BusinessCount = StructuralObject.SetValidValue(value, "BusinessCount");
                ReportPropertyChanged("BusinessCount");
                OnBusinessCountChanged();
            }
        }
        private Nullable<global::System.Int64> _BusinessCount;
        partial void OnBusinessCountChanging(Nullable<global::System.Int64> value);
        partial void OnBusinessCountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> AverageAnnualSalary
        {
            get
            {
                return _AverageAnnualSalary;
            }
            set
            {
                OnAverageAnnualSalaryChanging(value);
                ReportPropertyChanging("AverageAnnualSalary");
                _AverageAnnualSalary = StructuralObject.SetValidValue(value, "AverageAnnualSalary");
                ReportPropertyChanged("AverageAnnualSalary");
                OnAverageAnnualSalaryChanged();
            }
        }
        private Nullable<global::System.Int64> _AverageAnnualSalary;
        partial void OnAverageAnnualSalaryChanging(Nullable<global::System.Int64> value);
        partial void OnAverageAnnualSalaryChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> CostEffectiveness
        {
            get
            {
                return _CostEffectiveness;
            }
            set
            {
                OnCostEffectivenessChanging(value);
                ReportPropertyChanging("CostEffectiveness");
                _CostEffectiveness = StructuralObject.SetValidValue(value, "CostEffectiveness");
                ReportPropertyChanged("CostEffectiveness");
                OnCostEffectivenessChanged();
            }
        }
        private Nullable<global::System.Double> _CostEffectiveness;
        partial void OnCostEffectivenessChanging(Nullable<global::System.Double> value);
        partial void OnCostEffectivenessChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_IndustryData_GeographicLocation", "GeographicLocation")]
        public GeographicLocation GeographicLocation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("Data.FK_IndustryData_GeographicLocation", "GeographicLocation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("Data.FK_IndustryData_GeographicLocation", "GeographicLocation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GeographicLocation> GeographicLocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("Data.FK_IndustryData_GeographicLocation", "GeographicLocation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GeographicLocation>("Data.FK_IndustryData_GeographicLocation", "GeographicLocation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_IndustryData_Industry", "Industry")]
        public Industry Industry
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("Data.FK_IndustryData_Industry", "Industry").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("Data.FK_IndustryData_Industry", "Industry").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Industry> IndustryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("Data.FK_IndustryData_Industry", "Industry");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Industry>("Data.FK_IndustryData_Industry", "Industry", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "IndustryDataBand", "Band")]
        public EntityCollection<Band> Bands
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Band>("Data.IndustryDataBand", "Band");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Band>("Data.IndustryDataBand", "Band", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Data", Name="IndustryKeyword")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class IndustryKeyword : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new IndustryKeyword object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="industryId">Initial value of the IndustryId property.</param>
        /// <param name="sortOrder">Initial value of the SortOrder property.</param>
        public static IndustryKeyword CreateIndustryKeyword(global::System.Int64 id, global::System.Int64 industryId, global::System.Int32 sortOrder)
        {
            IndustryKeyword industryKeyword = new IndustryKeyword();
            industryKeyword.Id = id;
            industryKeyword.IndustryId = industryId;
            industryKeyword.SortOrder = sortOrder;
            return industryKeyword;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 IndustryId
        {
            get
            {
                return _IndustryId;
            }
            set
            {
                OnIndustryIdChanging(value);
                ReportPropertyChanging("IndustryId");
                _IndustryId = StructuralObject.SetValidValue(value, "IndustryId");
                ReportPropertyChanged("IndustryId");
                OnIndustryIdChanged();
            }
        }
        private global::System.Int64 _IndustryId;
        partial void OnIndustryIdChanging(global::System.Int64 value);
        partial void OnIndustryIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SortOrder
        {
            get
            {
                return _SortOrder;
            }
            set
            {
                OnSortOrderChanging(value);
                ReportPropertyChanging("SortOrder");
                _SortOrder = StructuralObject.SetValidValue(value, "SortOrder");
                ReportPropertyChanged("SortOrder");
                OnSortOrderChanged();
            }
        }
        private global::System.Int32 _SortOrder;
        partial void OnSortOrderChanging(global::System.Int32 value);
        partial void OnSortOrderChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SEOKey
        {
            get
            {
                return _SEOKey;
            }
            set
            {
                OnSEOKeyChanging(value);
                ReportPropertyChanging("SEOKey");
                _SEOKey = StructuralObject.SetValidValue(value, true, "SEOKey");
                ReportPropertyChanged("SEOKey");
                OnSEOKeyChanged();
            }
        }
        private global::System.String _SEOKey;
        partial void OnSEOKeyChanging(global::System.String value);
        partial void OnSEOKeyChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_IndustryKeyword_Industry", "Industry")]
        public Industry Industry
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("Data.FK_IndustryKeyword_Industry", "Industry").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("Data.FK_IndustryKeyword_Industry", "Industry").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Industry> IndustryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("Data.FK_IndustryKeyword_Industry", "Industry");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Industry>("Data.FK_IndustryKeyword_Industry", "Industry", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Data", Name="Nation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Nation : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Nation object.
        /// </summary>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="isActive">Initial value of the IsActive property.</param>
        /// <param name="id">Initial value of the Id property.</param>
        public static Nation CreateNation(global::System.String name, global::System.Boolean isActive, global::System.Int64 id)
        {
            Nation nation = new Nation();
            nation.Name = name;
            nation.IsActive = isActive;
            nation.Id = id;
            return nation;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SEOKey
        {
            get
            {
                return _SEOKey;
            }
            set
            {
                OnSEOKeyChanging(value);
                ReportPropertyChanging("SEOKey");
                _SEOKey = StructuralObject.SetValidValue(value, true, "SEOKey");
                ReportPropertyChanged("SEOKey");
                OnSEOKeyChanged();
            }
        }
        private global::System.String _SEOKey;
        partial void OnSEOKeyChanging(global::System.String value);
        partial void OnSEOKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value, "IsActive");
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Data", Name="Place")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Place : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Place object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="cityId">Initial value of the CityId property.</param>
        /// <param name="countyId">Initial value of the CountyId property.</param>
        public static Place CreatePlace(global::System.Int64 id, global::System.Int64 cityId, global::System.Int64 countyId)
        {
            Place place = new Place();
            place.Id = id;
            place.CityId = cityId;
            place.CountyId = countyId;
            return place;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 CityId
        {
            get
            {
                return _CityId;
            }
            set
            {
                OnCityIdChanging(value);
                ReportPropertyChanging("CityId");
                _CityId = StructuralObject.SetValidValue(value, "CityId");
                ReportPropertyChanged("CityId");
                OnCityIdChanged();
            }
        }
        private global::System.Int64 _CityId;
        partial void OnCityIdChanging(global::System.Int64 value);
        partial void OnCityIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 CountyId
        {
            get
            {
                return _CountyId;
            }
            set
            {
                OnCountyIdChanging(value);
                ReportPropertyChanging("CountyId");
                _CountyId = StructuralObject.SetValidValue(value, "CountyId");
                ReportPropertyChanged("CountyId");
                OnCountyIdChanged();
            }
        }
        private global::System.Int64 _CountyId;
        partial void OnCountyIdChanging(global::System.Int64 value);
        partial void OnCountyIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_Place_City", "City")]
        public City City
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("Data.FK_Place_City", "City").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("Data.FK_Place_City", "City").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<City> CityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("Data.FK_Place_City", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<City>("Data.FK_Place_City", "City", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_Place_County", "County")]
        public County County
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<County>("Data.FK_Place_County", "County").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<County>("Data.FK_Place_County", "County").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<County> CountyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<County>("Data.FK_Place_County", "County");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<County>("Data.FK_Place_County", "County", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_Place_GeographicLocation", "GeographicLocation")]
        public GeographicLocation GeographicLocation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("Data.FK_Place_GeographicLocation", "GeographicLocation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("Data.FK_Place_GeographicLocation", "GeographicLocation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GeographicLocation> GeographicLocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("Data.FK_Place_GeographicLocation", "GeographicLocation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GeographicLocation>("Data.FK_Place_GeographicLocation", "GeographicLocation", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Data", Name="SitemapBusiness")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SitemapBusiness : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SitemapBusiness object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="city">Initial value of the City property.</param>
        /// <param name="county">Initial value of the County property.</param>
        /// <param name="state">Initial value of the State property.</param>
        /// <param name="industry">Initial value of the Industry property.</param>
        /// <param name="businessId">Initial value of the BusinessId property.</param>
        /// <param name="business">Initial value of the Business property.</param>
        public static SitemapBusiness CreateSitemapBusiness(global::System.Int64 id, global::System.String city, global::System.String county, global::System.String state, global::System.String industry, global::System.Int64 businessId, global::System.String business)
        {
            SitemapBusiness sitemapBusiness = new SitemapBusiness();
            sitemapBusiness.Id = id;
            sitemapBusiness.City = city;
            sitemapBusiness.County = county;
            sitemapBusiness.State = state;
            sitemapBusiness.Industry = industry;
            sitemapBusiness.BusinessId = businessId;
            sitemapBusiness.Business = business;
            return sitemapBusiness;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String City
        {
            get
            {
                return _City;
            }
            set
            {
                OnCityChanging(value);
                ReportPropertyChanging("City");
                _City = StructuralObject.SetValidValue(value, false, "City");
                ReportPropertyChanged("City");
                OnCityChanged();
            }
        }
        private global::System.String _City;
        partial void OnCityChanging(global::System.String value);
        partial void OnCityChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String County
        {
            get
            {
                return _County;
            }
            set
            {
                OnCountyChanging(value);
                ReportPropertyChanging("County");
                _County = StructuralObject.SetValidValue(value, false, "County");
                ReportPropertyChanged("County");
                OnCountyChanged();
            }
        }
        private global::System.String _County;
        partial void OnCountyChanging(global::System.String value);
        partial void OnCountyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String State
        {
            get
            {
                return _State;
            }
            set
            {
                OnStateChanging(value);
                ReportPropertyChanging("State");
                _State = StructuralObject.SetValidValue(value, false, "State");
                ReportPropertyChanged("State");
                OnStateChanged();
            }
        }
        private global::System.String _State;
        partial void OnStateChanging(global::System.String value);
        partial void OnStateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Industry
        {
            get
            {
                return _Industry;
            }
            set
            {
                OnIndustryChanging(value);
                ReportPropertyChanging("Industry");
                _Industry = StructuralObject.SetValidValue(value, false, "Industry");
                ReportPropertyChanged("Industry");
                OnIndustryChanged();
            }
        }
        private global::System.String _Industry;
        partial void OnIndustryChanging(global::System.String value);
        partial void OnIndustryChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 BusinessId
        {
            get
            {
                return _BusinessId;
            }
            set
            {
                OnBusinessIdChanging(value);
                ReportPropertyChanging("BusinessId");
                _BusinessId = StructuralObject.SetValidValue(value, "BusinessId");
                ReportPropertyChanged("BusinessId");
                OnBusinessIdChanged();
            }
        }
        private global::System.Int64 _BusinessId;
        partial void OnBusinessIdChanging(global::System.Int64 value);
        partial void OnBusinessIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Business
        {
            get
            {
                return _Business;
            }
            set
            {
                OnBusinessChanging(value);
                ReportPropertyChanging("Business");
                _Business = StructuralObject.SetValidValue(value, false, "Business");
                ReportPropertyChanged("Business");
                OnBusinessChanged();
            }
        }
        private global::System.String _Business;
        partial void OnBusinessChanging(global::System.String value);
        partial void OnBusinessChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Data", Name="State")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class State : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new State object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="sEOKey">Initial value of the SEOKey property.</param>
        /// <param name="nationId">Initial value of the NationId property.</param>
        public static State CreateState(global::System.Int64 id, global::System.String name, global::System.String sEOKey, global::System.Int64 nationId)
        {
            State state = new State();
            state.Id = id;
            state.Name = name;
            state.SEOKey = sEOKey;
            state.NationId = nationId;
            return state;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SEOKey
        {
            get
            {
                return _SEOKey;
            }
            set
            {
                OnSEOKeyChanging(value);
                ReportPropertyChanging("SEOKey");
                _SEOKey = StructuralObject.SetValidValue(value, false, "SEOKey");
                ReportPropertyChanged("SEOKey");
                OnSEOKeyChanged();
            }
        }
        private global::System.String _SEOKey;
        partial void OnSEOKeyChanging(global::System.String value);
        partial void OnSEOKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 NationId
        {
            get
            {
                return _NationId;
            }
            set
            {
                OnNationIdChanging(value);
                ReportPropertyChanging("NationId");
                _NationId = StructuralObject.SetValidValue(value, "NationId");
                ReportPropertyChanged("NationId");
                OnNationIdChanged();
            }
        }
        private global::System.Int64 _NationId;
        partial void OnNationIdChanging(global::System.Int64 value);
        partial void OnNationIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Abbreviation
        {
            get
            {
                return _Abbreviation;
            }
            set
            {
                OnAbbreviationChanging(value);
                ReportPropertyChanging("Abbreviation");
                _Abbreviation = StructuralObject.SetValidValue(value, true, "Abbreviation");
                ReportPropertyChanged("Abbreviation");
                OnAbbreviationChanged();
            }
        }
        private global::System.String _Abbreviation;
        partial void OnAbbreviationChanging(global::System.String value);
        partial void OnAbbreviationChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_City_State", "City")]
        public EntityCollection<City> Cities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<City>("Data.FK_City_State", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<City>("Data.FK_City_State", "City", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_State_GeographicLocation", "GeographicLocation")]
        public GeographicLocation GeographicLocation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("Data.FK_State_GeographicLocation", "GeographicLocation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("Data.FK_State_GeographicLocation", "GeographicLocation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GeographicLocation> GeographicLocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("Data.FK_State_GeographicLocation", "GeographicLocation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GeographicLocation>("Data.FK_State_GeographicLocation", "GeographicLocation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_Business_State", "Business")]
        public EntityCollection<Business> Businesses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Business>("Data.FK_Business_State", "Business");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Business>("Data.FK_Business_State", "Business", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Data", "FK_County_State", "County")]
        public EntityCollection<County> Counties
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<County>("Data.FK_County_State", "County");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<County>("Data.FK_County_State", "County", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Data", Name="ZipCode")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ZipCode : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ZipCode object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="zip">Initial value of the Zip property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static ZipCode CreateZipCode(global::System.Int64 id, global::System.String zip, global::System.String name)
        {
            ZipCode zipCode = new ZipCode();
            zipCode.Id = id;
            zipCode.Zip = zip;
            zipCode.Name = name;
            return zipCode;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Zip
        {
            get
            {
                return _Zip;
            }
            set
            {
                OnZipChanging(value);
                ReportPropertyChanging("Zip");
                _Zip = StructuralObject.SetValidValue(value, false, "Zip");
                ReportPropertyChanged("Zip");
                OnZipChanged();
            }
        }
        private global::System.String _Zip;
        partial void OnZipChanging(global::System.String value);
        partial void OnZipChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CityId
        {
            get
            {
                return _CityId;
            }
            set
            {
                OnCityIdChanging(value);
                ReportPropertyChanging("CityId");
                _CityId = StructuralObject.SetValidValue(value, "CityId");
                ReportPropertyChanged("CityId");
                OnCityIdChanged();
            }
        }
        private Nullable<global::System.Int64> _CityId;
        partial void OnCityIdChanging(Nullable<global::System.Int64> value);
        partial void OnCityIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CountyId
        {
            get
            {
                return _CountyId;
            }
            set
            {
                OnCountyIdChanging(value);
                ReportPropertyChanging("CountyId");
                _CountyId = StructuralObject.SetValidValue(value, "CountyId");
                ReportPropertyChanged("CountyId");
                OnCountyIdChanged();
            }
        }
        private Nullable<global::System.Int64> _CountyId;
        partial void OnCountyIdChanging(Nullable<global::System.Int64> value);
        partial void OnCountyIdChanged();

        #endregion

    }

    #endregion

}
